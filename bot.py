import os
import asyncio
import aiohttp
import logging
from bs4 import BeautifulSoup
from dotenv import load_dotenv
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
last_title = None

# –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ Binance
async def fetch_latest_announcement():
    url = 'https://www.binance.com/en/support/announcement/list/161'
    headers = {
        'User-Agent': 'Mozilla/5.0'
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as resp:
            if resp.status == 200:
                html = await resp.text()
                soup = BeautifulSoup(html, 'lxml')
                items = soup.select('a.css-1ej4hfo')  # —Ü–µ CSS –∫–ª–∞—Å –æ–≥–æ–ª–æ—à–µ–Ω—å
                if items:
                    return items[0].get_text(strip=True)
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–ø–∏—Ç—É Binance: {resp.status}")
            return None

# –¶–∏–∫–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–≤–∏–Ω
async def check_announcements(bot: Bot):
    global last_title
    while True:
        title = await fetch_latest_announcement()
        if title and title != last_title:
            last_title = title
            await bot.send_message(chat_id=CHAT_ID, text=f"üÜï –ù–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:\n{title}")
        await asyncio.sleep(300)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 5 —Ö–≤

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current = await fetch_latest_announcement()
    await update.message.reply_text(
        f"üëã –ë–æ—Ç –ø—Ä–∞—Ü—é—î!\n–û—Å—Ç–∞–Ω–Ω—î –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è Binance:\n\nüì∞ {current if current else '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏'}"
    )

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))

    # –§–æ–Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è
    asyncio.create_task(check_announcements(application.bot))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.")
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
