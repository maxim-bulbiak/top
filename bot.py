import os
import asyncio
import aiohttp
import logging
from bs4 import BeautifulSoup
from dotenv import load_dotenv
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
last_title = None

# –û—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –Ω–æ–≤–∏–Ω—É –∑ Binance
async def fetch_latest_announcement():
    url = 'https://www.binance.com/en/support/announcement/list/161'
    headers = {
        'User-Agent': 'Mozilla/5.0'
    }

    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as resp:
            if resp.status == 200:
                html = await resp.text()
                soup = BeautifulSoup(html, 'lxml')

                # –®—É–∫–∞—î–º–æ –ø–µ—Ä—à–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
                latest = soup.find('a', class_='css-1ej4hfo')
                if latest:
                    title = latest.get_text(strip=True)
                    return title
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.")
                    return None
            else:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ HTTP: {resp.status}")
                return None

# –¶–∏–∫–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–≤–∏–Ω
async def check_announcements(bot: Bot):
    global last_title
    while True:
        title = await fetch_latest_announcement()
        if title:
            if last_title != title:
                last_title = title
                await bot.send_message(chat_id=CHAT_ID, text=f"üÜï –ù–æ–≤–∞ –Ω–æ–≤–∏–Ω–∞:\n<b>{title}</b>", parse_mode="HTML")
            else:
                logger.info("‚ÑπÔ∏è –ù–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω –Ω–µ–º–∞—î.")
        await asyncio.sleep(300)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 5 —Ö–≤

# /start –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    title = await fetch_latest_announcement()
    await update.message.reply_text(
        f"ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π.\n\nüì¢ –û—Å—Ç–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω–∞:\n<b>{title}</b>",
        parse_mode="HTML"
    )

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))

    asyncio.create_task(check_announcements(application.bot))

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.")
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
