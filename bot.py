import os
import asyncio
import aiohttp
import logging
from bs4 import BeautifulSoup
from dotenv import load_dotenv
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
last_title = None

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—É –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –Ω–æ–≤–∏–Ω–∏ Binance
async def fetch_latest_announcement():
    url = "https://www.binance.com/bapi/composite/v1/public/cms/article/list/query"
    params = {
        "type": "1",
        "catalogId": "161",
        "pageNo": "1",
        "pageSize": "1"
    }
    headers = {"User-Agent": "Mozilla/5.0"}

    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params, headers=headers) as resp:
            if resp.status == 200:
                data = await resp.json()
                try:
                    articles = data["data"]["articles"]
                    if articles:
                        return articles[0]["title"]
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–±–æ—Ä—É JSON: {e}")
            else:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {resp.status}")
            return None


# –§–æ–Ω–æ–≤–∏–π —Ü–∏–∫–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
async def check_announcements(bot: Bot):
    global last_title
    while True:
        try:
            title = await fetch_latest_announcement()
            if title and title != last_title:
                last_title = title
                await bot.send_message(chat_id=CHAT_ID, text=f"üÜï –ù–æ–≤–∞ –Ω–æ–≤–∏–Ω–∞:\n{title}")
            else:
                logger.info("–ù–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω –Ω–µ–º–∞—î.")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —É –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –Ω–æ–≤–∏–Ω: {e}")
        await asyncio.sleep(300)  # –ö–æ–∂–Ω—ñ 5 —Ö–≤

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    latest = await fetch_latest_announcement()
    msg = f"ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π. –û—Å—Ç–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω–∞:\n{latest if latest else '–Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É.'}"
    await update.message.reply_text(msg)

# –ì–æ–ª–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞
async def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))

    # –§–æ–Ω–æ–≤–∏–π task
    asyncio.create_task(check_announcements(application.bot))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.")
    await application.run_polling()

# –û–±—Ö—ñ–¥ –ø—Ä–æ–±–ª–µ–º–∏ –∑ event loop (Render, Jupyter —Ç–æ—â–æ)
if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())
