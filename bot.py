import os
import aiohttp
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# --- –ó–∞–ø–∞—Å–Ω—ñ —Å–∏–º–≤–æ–ª–∏, —è–∫—â–æ Binance API –Ω–µ –ø—Ä–∞—Ü—é—î
FALLBACK_SYMBOLS = ["BTCUSDT", "ETHUSDT", "BNBUSDT", "XRPUSDT", "ADAUSDT", "SOLUSDT", "DOGEUSDT", "DOTUSDT", "MATICUSDT", "LTCUSDT"]

# --- –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä—à–∏—Ö 10 –ø–∞—Ä –∑ Binance (–∑ USDT)
async def get_first_10_symbols():
    print("üîç –û—Ç—Ä–∏–º—É—é —Å–ø–∏—Å–æ–∫ USDT-–ø–∞—Ä –∑ Binance...")
    url = "https://api.binance.com/api/v3/exchangeInfo"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                print("üî¢ –ö–æ–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ Binance:", resp.status)
                if resp.status != 200:
                    print("‚ùå Binance API –ø–æ–≤–µ—Ä–Ω—É–ª–æ –ø–æ–º–∏–ª–∫—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∑–∞–ø–∞—Å–Ω—ñ –ø–∞—Ä–∏.")
                    return FALLBACK_SYMBOLS
                data = await resp.json()
                symbols = [
                    s['symbol'] for s in data.get('symbols', [])
                    if s.get('status') == 'TRADING' and s.get('quoteAsset') == 'USDT'
                ]
                if not symbols:
                    print("‚ö†Ô∏è –û—Ç—Ä–∏–º–∞–Ω–æ 0 –ø–∞—Ä. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∑–∞–ø–∞—Å–Ω—ñ.")
                    return FALLBACK_SYMBOLS
                print(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(symbols)} –ø–∞—Ä. –ü–µ—Ä—à—ñ 10: {symbols[:10]}")
                return symbols[:10]
    except Exception as e:
        print(f"‚ùó –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ Binance: {e}")
        return FALLBACK_SYMBOLS

# --- –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –¥–ª—è –ø–∞—Ä–∏
async def get_price(session, symbol):
    print(f"üìà –û—Ç—Ä–∏–º—É—é —Ü—ñ–Ω—É –¥–ª—è: {symbol}")
    url = f"https://api.binance.com/api/v3/ticker/price?symbol={symbol}"
    try:
        async with session.get(url) as resp:
            if resp.status != 200:
                print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –¥–ª—è {symbol}, –∫–æ–¥: {resp.status}")
                return symbol, "N/A"
            data = await resp.json()
            price = data.get('price', "N/A")
            print(f"‚Üí {symbol}: {price}")
            return symbol, price
    except Exception as e:
        print(f"‚ùó –ü–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}")
        return symbol, "N/A"

# --- –ö–æ–º–∞–Ω–¥–∞ /prices
@dp.message(Command("prices"))
async def handle_prices_command(message: types.Message):
    print(f"üì¨ –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /prices –≤—ñ–¥ {message.from_user.username}")
    await message.answer("üì° –û—Ç—Ä–∏–º—É—é —Ü—ñ–Ω–∏ –¥–ª—è 10 –ø–∞—Ä...")

    symbols = await get_first_10_symbols()

    async with aiohttp.ClientSession() as session:
        tasks = [get_price(session, symbol) for symbol in symbols]
        prices = await asyncio.gather(*tasks)

    response = "üí± –ü–æ—Ç–æ—á–Ω—ñ —Ü—ñ–Ω–∏:\n"
    for symbol, price in prices:
        response += f"‚Ä¢ {symbol}: {price}\n"

    print("üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ü—ñ–Ω–∞–º–∏")
    await message.answer(response)

# --- –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
async def send_start_message():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    await bot.send_message(CHAT_ID, "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ö–æ–º–∞–Ω–¥–∞ /prices ‚Äî –ø–æ–∫–∞–∂–µ —Ü—ñ–Ω–∏ 10 –ø–∞—Ä.")

# --- –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    print("üü¢ –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ–ª–æ–≤–Ω—É –ø–æ–¥—ñ—é...")
    await send_start_message()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
